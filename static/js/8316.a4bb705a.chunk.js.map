{"version":3,"file":"static/js/8316.a4bb705a.chunk.js","mappings":"2FAAC,WAEA,GAAqB,qBAAVA,MAAX,CAIA,IAAIC,EAAM,mHACNC,EAAQ,uBACRC,EAAS,0BAGTC,EAAa,CAAC,UAAW,MAAO,aAAc,UAElDJ,MAAMK,QAAQC,WAAa,CAC1BC,eAAgB,SAAUC,GAEpBA,IAAWA,EAAQ,cAGxBR,MAAMS,UAAUC,IAAIF,GAAS,SAAUG,EAAKC,EAAKC,GAC5CT,EAAWU,QAAQD,IAAS,IAAME,MAAMC,QAAQJ,KAC9CA,EAAIK,UACRL,EAAMM,KAAKP,GAAO,CACjBM,QAASL,IAIXA,EAAIO,OAASP,EAAIO,QAAU,CAAC,EAEhB,WAARN,IACHD,EAAIO,OAAO,WAAahB,GAEb,cAARU,EACHb,MAAMS,UAAUW,aAAa,SAAU,cAAe,CAAE,WAAYnB,GAAOW,GAE3EA,EAAIO,OAAO,YAAclB,EAG1BW,EAAIO,OAAO,cAAgBjB,EAE7B,IACAM,EAAQ,YAAcP,EACtBO,EAAQ,cAAgBN,EACzB,GAGDF,MAAMqB,MAAMC,IAAI,oBAAoB,SAAUC,GAC7CvB,MAAMK,QAAQC,WAAWC,eAAegB,EAAIf,QAC7C,IAEAR,MAAMqB,MAAMC,IAAI,QAAQ,SAAUC,GACjC,GAAI,SAASC,KAAKD,EAAIV,MAAO,CAC5BU,EAAIE,IAAM,IAEV,IAAIC,EAAOH,EAAII,QAEf,GAAgB,cAAZJ,EAAIV,MAAmD,GAA3Ba,EAAKZ,QAAQ,WAC5CY,EAAO,UAAYA,OACb,GAAgB,WAAZH,EAAIV,KAAmB,CAEjC,IAAIe,EAAQL,EAAII,QAAQC,MAAMzB,GAE9BuB,EAAOE,EAAM,GACbL,EAAII,QAAUC,EAAM,EACrB,CAEAL,EAAIM,WAAWH,KAAOA,EAGtB,IACCH,EAAII,QAAUG,mBAAmBP,EAAII,QACtC,CAAE,MAAOI,GAAe,CACzB,CACD,GArEA,CAuEA,CA3EA,E","sources":["../node_modules/prismjs/plugins/autolinker/prism-autolinker.js"],"sourcesContent":["(function () {\n\n\tif (typeof Prism === 'undefined') {\n\t\treturn;\n\t}\n\n\tvar url = /\\b([a-z]{3,7}:\\/\\/|tel:)[\\w\\-+%~/.:=&!$'()*,;@]+(?:\\?[\\w\\-+%~/.:=?&!$'()*,;@]*)?(?:#[\\w\\-+%~/.:#=?&!$'()*,;@]*)?/;\n\tvar email = /\\b\\S+@[\\w.]+[a-z]{2}/;\n\tvar linkMd = /\\[([^\\]]+)\\]\\(([^)]+)\\)/;\n\n\t// Tokens that may contain URLs and emails\n\tvar candidates = ['comment', 'url', 'attr-value', 'string'];\n\n\tPrism.plugins.autolinker = {\n\t\tprocessGrammar: function (grammar) {\n\t\t\t// Abort if grammar has already been processed\n\t\t\tif (!grammar || grammar['url-link']) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPrism.languages.DFS(grammar, function (key, def, type) {\n\t\t\t\tif (candidates.indexOf(type) > -1 && !Array.isArray(def)) {\n\t\t\t\t\tif (!def.pattern) {\n\t\t\t\t\t\tdef = this[key] = {\n\t\t\t\t\t\t\tpattern: def\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tdef.inside = def.inside || {};\n\n\t\t\t\t\tif (type == 'comment') {\n\t\t\t\t\t\tdef.inside['md-link'] = linkMd;\n\t\t\t\t\t}\n\t\t\t\t\tif (type == 'attr-value') {\n\t\t\t\t\t\tPrism.languages.insertBefore('inside', 'punctuation', { 'url-link': url }, def);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdef.inside['url-link'] = url;\n\t\t\t\t\t}\n\n\t\t\t\t\tdef.inside['email-link'] = email;\n\t\t\t\t}\n\t\t\t});\n\t\t\tgrammar['url-link'] = url;\n\t\t\tgrammar['email-link'] = email;\n\t\t}\n\t};\n\n\tPrism.hooks.add('before-highlight', function (env) {\n\t\tPrism.plugins.autolinker.processGrammar(env.grammar);\n\t});\n\n\tPrism.hooks.add('wrap', function (env) {\n\t\tif (/-link$/.test(env.type)) {\n\t\t\tenv.tag = 'a';\n\n\t\t\tvar href = env.content;\n\n\t\t\tif (env.type == 'email-link' && href.indexOf('mailto:') != 0) {\n\t\t\t\thref = 'mailto:' + href;\n\t\t\t} else if (env.type == 'md-link') {\n\t\t\t\t// Markdown\n\t\t\t\tvar match = env.content.match(linkMd);\n\n\t\t\t\thref = match[2];\n\t\t\t\tenv.content = match[1];\n\t\t\t}\n\n\t\t\tenv.attributes.href = href;\n\n\t\t\t// Silently catch any error thrown by decodeURIComponent (#1186)\n\t\t\ttry {\n\t\t\t\tenv.content = decodeURIComponent(env.content);\n\t\t\t} catch (e) { /* noop */ }\n\t\t}\n\t});\n\n}());\n"],"names":["Prism","url","email","linkMd","candidates","plugins","autolinker","processGrammar","grammar","languages","DFS","key","def","type","indexOf","Array","isArray","pattern","this","inside","insertBefore","hooks","add","env","test","tag","href","content","match","attributes","decodeURIComponent","e"],"sourceRoot":""}