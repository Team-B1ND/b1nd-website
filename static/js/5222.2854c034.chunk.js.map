{"version":3,"file":"static/js/5222.2854c034.chunk.js","mappings":"0FAEsB,qBAAVA,OAA6C,qBAAbC,UAA6BA,SAASC,cAIjFF,MAAMG,QAAQC,YAAa,EAE3BJ,MAAMK,MAAMC,IAAI,oBAAoB,SAAUC,GAC7C,GAAKA,EAAIC,QAAQC,SAASC,QAIrBV,MAAMW,KAAKC,SAASL,EAAIC,QAAS,eAAe,GAArD,CAIA,IAAIK,EAAab,MAAMW,KAAKC,SAASL,EAAIC,QAAS,eAAe,GAc7DM,EAAM,EACNC,EAAO,GA6BXC,EAAgBT,EAAIC,SAEhBO,EAAKL,SAERH,EAAIU,WAAaF,EAlDlB,CAkBA,SAASG,EAAeV,GACvB,GAVD,SAAoBA,GACnB,OAAIK,GAAiD,SAAnCL,EAAQW,SAASC,gBAA4BZ,EAAQa,UAAUC,SAAS,QAI3F,CAKMC,CAAWf,GAAhB,CAMA,IAAIgB,EAAI,CAEPhB,QAASA,EACTiB,QAASX,GAEVC,EAAKW,KAAKF,GAEVR,EAAgBR,GAEhBgB,EAAEG,SAAWb,CAXb,MAFCE,EAAgBR,EAclB,CACA,SAASQ,EAAgBR,GACxB,IAAK,IAAIoB,EAAI,EAAGC,EAAIrB,EAAQsB,WAAWpB,OAAQkB,EAAIC,EAAGD,IAAK,CAC1D,IAAIG,EAAQvB,EAAQsB,WAAWF,GACR,IAAnBG,EAAMC,SACTd,EAAea,GACc,IAAnBA,EAAMC,WAChBlB,GAAOiB,EAAMhB,KAAKL,OAEpB,CACD,CAOD,IAEAV,MAAMK,MAAMC,IAAI,mBAAmB,SAAUC,GAC5C,GAAIA,EAAIU,YAAcV,EAAIU,WAAWP,OAAQ,CAE5C,IAAIuB,EAAO,SAAUC,EAAKC,GACzB,IAAK,IAAIP,EAAI,EAAGC,EAAIK,EAAIJ,WAAWpB,OAAQkB,EAAIC,EAAGD,IAAK,CAEtD,IAAIG,EAAQG,EAAIJ,WAAWF,GAE3B,GAAuB,IAAnBG,EAAMC,UACT,IAAKC,EAAKF,EAAOI,GAChB,OAAO,OAGqB,IAAnBJ,EAAMC,YACXG,EAAUC,WAAaD,EAAUrB,IAAMiB,EAAMhB,KAAKL,OAASyB,EAAUE,KAAKZ,UAE9EU,EAAUC,UAAYL,EACtBI,EAAUG,aAAeH,EAAUE,KAAKZ,QAAUU,EAAUrB,KAEzDqB,EAAUC,WAAaD,EAAUrB,IAAMiB,EAAMhB,KAAKL,QAAUyB,EAAUE,KAAKV,WAE9EQ,EAAUI,QAAUR,EACpBI,EAAUK,WAAaL,EAAUE,KAAKV,SAAWQ,EAAUrB,KAG5DqB,EAAUrB,KAAOiB,EAAMhB,KAAKL,QAG7B,GAAIyB,EAAUC,WAAaD,EAAUI,QAAS,CAE7C,IAAIE,EAAQxC,SAASC,cASrB,OARAuC,EAAMC,SAASP,EAAUC,UAAWD,EAAUG,cAC9CG,EAAME,OAAOR,EAAUI,QAASJ,EAAUK,YAC1CL,EAAUE,KAAK7B,QAAQoC,UAAY,GACnCT,EAAUE,KAAK7B,QAAQqC,YAAYJ,EAAMK,mBACzCL,EAAMM,WAAWZ,EAAUE,KAAK7B,SAChCiC,EAAMO,UAGC,CACR,CACD,CACA,OAAO,CACR,EAGAzC,EAAIU,WAAWgC,SAAQ,SAAUZ,GAChCJ,EAAK1B,EAAIC,QAAS,CACjB6B,KAAMA,EACNvB,IAAK,GAEP,IAEAP,EAAI2C,gBAAkB3C,EAAIC,QAAQoC,SACnC,CACD,I","sources":["../node_modules/prismjs/plugins/keep-markup/prism-keep-markup.js"],"sourcesContent":["(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined' || !document.createRange) {\n\t\treturn;\n\t}\n\n\tPrism.plugins.KeepMarkup = true;\n\n\tPrism.hooks.add('before-highlight', function (env) {\n\t\tif (!env.element.children.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!Prism.util.isActive(env.element, 'keep-markup', true)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar dropTokens = Prism.util.isActive(env.element, 'drop-tokens', false);\n\t\t/**\n\t\t * Returns whether the given element should be kept.\n\t\t *\n\t\t * @param {HTMLElement} element\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction shouldKeep(element) {\n\t\t\tif (dropTokens && element.nodeName.toLowerCase() === 'span' && element.classList.contains('token')) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tvar pos = 0;\n\t\tvar data = [];\n\t\tfunction processElement(element) {\n\t\t\tif (!shouldKeep(element)) {\n\t\t\t\t// don't keep this element and just process its children\n\t\t\t\tprocessChildren(element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar o = {\n\t\t\t\t// Store original element so we can restore it after highlighting\n\t\t\t\telement: element,\n\t\t\t\tposOpen: pos\n\t\t\t};\n\t\t\tdata.push(o);\n\n\t\t\tprocessChildren(element);\n\n\t\t\to.posClose = pos;\n\t\t}\n\t\tfunction processChildren(element) {\n\t\t\tfor (var i = 0, l = element.childNodes.length; i < l; i++) {\n\t\t\t\tvar child = element.childNodes[i];\n\t\t\t\tif (child.nodeType === 1) { // element\n\t\t\t\t\tprocessElement(child);\n\t\t\t\t} else if (child.nodeType === 3) { // text\n\t\t\t\t\tpos += child.data.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprocessChildren(env.element);\n\n\t\tif (data.length) {\n\t\t\t// data is an array of all existing tags\n\t\t\tenv.keepMarkup = data;\n\t\t}\n\t});\n\n\tPrism.hooks.add('after-highlight', function (env) {\n\t\tif (env.keepMarkup && env.keepMarkup.length) {\n\n\t\t\tvar walk = function (elt, nodeState) {\n\t\t\t\tfor (var i = 0, l = elt.childNodes.length; i < l; i++) {\n\n\t\t\t\t\tvar child = elt.childNodes[i];\n\n\t\t\t\t\tif (child.nodeType === 1) { // element\n\t\t\t\t\t\tif (!walk(child, nodeState)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if (child.nodeType === 3) { // text\n\t\t\t\t\t\tif (!nodeState.nodeStart && nodeState.pos + child.data.length > nodeState.node.posOpen) {\n\t\t\t\t\t\t\t// We found the start position\n\t\t\t\t\t\t\tnodeState.nodeStart = child;\n\t\t\t\t\t\t\tnodeState.nodeStartPos = nodeState.node.posOpen - nodeState.pos;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (nodeState.nodeStart && nodeState.pos + child.data.length >= nodeState.node.posClose) {\n\t\t\t\t\t\t\t// We found the end position\n\t\t\t\t\t\t\tnodeState.nodeEnd = child;\n\t\t\t\t\t\t\tnodeState.nodeEndPos = nodeState.node.posClose - nodeState.pos;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnodeState.pos += child.data.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (nodeState.nodeStart && nodeState.nodeEnd) {\n\t\t\t\t\t\t// Select the range and wrap it with the element\n\t\t\t\t\t\tvar range = document.createRange();\n\t\t\t\t\t\trange.setStart(nodeState.nodeStart, nodeState.nodeStartPos);\n\t\t\t\t\t\trange.setEnd(nodeState.nodeEnd, nodeState.nodeEndPos);\n\t\t\t\t\t\tnodeState.node.element.innerHTML = '';\n\t\t\t\t\t\tnodeState.node.element.appendChild(range.extractContents());\n\t\t\t\t\t\trange.insertNode(nodeState.node.element);\n\t\t\t\t\t\trange.detach();\n\n\t\t\t\t\t\t// Process is over\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t};\n\n\t\t\t// For each tag, we walk the DOM to reinsert it\n\t\t\tenv.keepMarkup.forEach(function (node) {\n\t\t\t\twalk(env.element, {\n\t\t\t\t\tnode: node,\n\t\t\t\t\tpos: 0\n\t\t\t\t});\n\t\t\t});\n\t\t\t// Store new highlightedCode for later hooks calls\n\t\t\tenv.highlightedCode = env.element.innerHTML;\n\t\t}\n\t});\n}());\n"],"names":["Prism","document","createRange","plugins","KeepMarkup","hooks","add","env","element","children","length","util","isActive","dropTokens","pos","data","processChildren","keepMarkup","processElement","nodeName","toLowerCase","classList","contains","shouldKeep","o","posOpen","push","posClose","i","l","childNodes","child","nodeType","walk","elt","nodeState","nodeStart","node","nodeStartPos","nodeEnd","nodeEndPos","range","setStart","setEnd","innerHTML","appendChild","extractContents","insertNode","detach","forEach","highlightedCode"],"sourceRoot":""}