{"version":3,"file":"static/js/8600.e21b1ec6.chunk.js","mappings":"2FAAC,WAEA,GAAqB,qBAAVA,MAAX,CAuBA,IAAIC,EAEAC,EAEAC,EAAe,GAYnBH,MAAMI,QAAQC,YAAc,CAM3BC,IAAK,SAAUC,GACdN,EAAQM,CACT,EAQAC,IAAK,SAAaC,GAEhBP,EAD0B,oBAAhBO,EACDA,EAEA,SAAUC,GAClB,OAAOD,EAAYC,IAAcA,CAClC,CAEF,EAMAC,OAAQ,SAAgBC,GACvBT,EAAeS,GAAU,EAC1B,EASAC,MAAOA,GAGRb,MAAMc,MAAMR,IAAI,QAAQ,SAAUS,GACjC,GAAId,EAAO,CACV,IAAIe,EAASf,EAAM,CAClBgB,QAASF,EAAIE,QACbC,KAAMH,EAAIG,KACVC,SAAUJ,EAAII,WAGXC,MAAMC,QAAQL,GACjBD,EAAIO,QAAQC,KAAKV,MAAME,EAAIO,QAASN,GAC1BA,GACVD,EAAIO,QAAQC,KAAKP,EAEnB,EAEKd,GAAWC,KAIhBY,EAAIO,QAAUP,EAAIO,QAAQd,KAAI,SAAUgB,GACvC,OAAOX,EAAMW,EAAGT,EAAII,SACrB,IACD,GAvGA,CAgCA,SAASN,EAAMH,EAAWS,GACzB,OAAOhB,GAAgBD,EAASA,EAAOQ,EAAWS,GAAYT,EAC/D,CAuEA,CA7GA,E","sources":["../node_modules/prismjs/plugins/custom-class/prism-custom-class.js"],"sourcesContent":["(function () {\n\n\tif (typeof Prism === 'undefined') {\n\t\treturn;\n\t}\n\n\t/**\n\t * @callback ClassMapper\n\t * @param {string} className\n\t * @param {string} language\n\t * @returns {string}\n\t *\n\t * @callback ClassAdder\n\t * @param {ClassAdderEnvironment} env\n\t * @returns {undefined | string | string[]}\n\t *\n\t * @typedef ClassAdderEnvironment\n\t * @property {string} language\n\t * @property {string} type\n\t * @property {string} content\n\t */\n\n\t// options\n\n\t/** @type {ClassAdder | undefined} */\n\tvar adder;\n\t/** @type {ClassMapper | undefined} */\n\tvar mapper;\n\t/** @type {string} */\n\tvar prefixString = '';\n\n\n\t/**\n\t * @param {string} className\n\t * @param {string} language\n\t */\n\tfunction apply(className, language) {\n\t\treturn prefixString + (mapper ? mapper(className, language) : className);\n\t}\n\n\n\tPrism.plugins.customClass = {\n\t\t/**\n\t\t * Sets the function which can be used to add custom aliases to any token.\n\t\t *\n\t\t * @param {ClassAdder} classAdder\n\t\t */\n\t\tadd: function (classAdder) {\n\t\t\tadder = classAdder;\n\t\t},\n\t\t/**\n\t\t * Maps all class names using the given object or map function.\n\t\t *\n\t\t * This does not affect the prefix.\n\t\t *\n\t\t * @param {Object<string, string> | ClassMapper} classMapper\n\t\t */\n\t\tmap: function map(classMapper) {\n\t\t\tif (typeof classMapper === 'function') {\n\t\t\t\tmapper = classMapper;\n\t\t\t} else {\n\t\t\t\tmapper = function (className) {\n\t\t\t\t\treturn classMapper[className] || className;\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Adds the given prefix to all class names.\n\t\t *\n\t\t * @param {string} string\n\t\t */\n\t\tprefix: function prefix(string) {\n\t\t\tprefixString = string || '';\n\t\t},\n\t\t/**\n\t\t * Applies the current mapping and prefix to the given class name.\n\t\t *\n\t\t * @param {string} className A single class name.\n\t\t * @param {string} language The language of the code that contains this class name.\n\t\t *\n\t\t * If the language is unknown, pass `\"none\"`.\n\t\t */\n\t\tapply: apply\n\t};\n\n\tPrism.hooks.add('wrap', function (env) {\n\t\tif (adder) {\n\t\t\tvar result = adder({\n\t\t\t\tcontent: env.content,\n\t\t\t\ttype: env.type,\n\t\t\t\tlanguage: env.language\n\t\t\t});\n\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\tenv.classes.push.apply(env.classes, result);\n\t\t\t} else if (result) {\n\t\t\t\tenv.classes.push(result);\n\t\t\t}\n\t\t}\n\n\t\tif (!mapper && !prefixString) {\n\t\t\treturn;\n\t\t}\n\n\t\tenv.classes = env.classes.map(function (c) {\n\t\t\treturn apply(c, env.language);\n\t\t});\n\t});\n\n}());\n"],"names":["Prism","adder","mapper","prefixString","plugins","customClass","add","classAdder","map","classMapper","className","prefix","string","apply","hooks","env","result","content","type","language","Array","isArray","classes","push","c"],"sourceRoot":""}