{"version":3,"file":"static/js/7476.54ae00b7.chunk.js","mappings":"2FAAC,WAEA,GAAqB,qBAAVA,MAAX,CAKA,IAAIC,EAAiB,kBACjBC,EAAW,wHAEXC,EAAYC,OAAO,0DAA0DC,OAAOC,QAAQ,OAAO,WAAc,OAAOJ,EAASG,MAAQ,IAAI,MAE7IE,GAAgB,EAEpBP,MAAMQ,MAAMC,IAAI,uBAAuB,SAAUC,GAChD,IAAIC,EAAOD,EAAIE,SACXX,EAAeY,KAAKF,KAAUD,EAAII,UACrCJ,EAAII,QAAUd,MAAMe,UAAUJ,GAAQX,MAAMe,UAAUC,KAExD,IACAhB,MAAMQ,MAAMC,IAAI,mBAAmB,SAAUC,GACvCH,GAAkBP,MAAMe,UAAUC,MAAShB,MAAMiB,QAAQC,aAC7DX,GAAgB,EAChBY,QAAQC,KAAK,sKAId,IAAIT,EAAOD,EAAIE,SACXX,EAAeY,KAAKF,KAAUX,MAAMe,UAAUJ,KACjDX,MAAMe,UAAUJ,GAAQX,MAAMe,UAAUC,KAE1C,IAEAhB,MAAMQ,MAAMC,IAAI,QAAQ,SAAUC,GACjC,IAAIW,EAAkBC,EAEtB,GAAqB,SAAjBZ,EAAIE,SAAqB,CAC5B,IAAIW,EAAYtB,EAAeuB,KAAKd,EAAIE,UACxC,IAAKW,EACJ,OAGDF,EAAeE,EAAU,GACzBD,EAActB,MAAMe,UAAUM,EAC/B,CAEA,IAAII,EAAWzB,MAAMe,UAAUC,MAAQhB,MAAMe,UAAUC,KAAKS,SAG5D,GAAIA,GAAYf,EAAIgB,QAAQD,EAAU,CAErC,IASIE,EANAC,EAHUlB,EAAImB,QAAQvB,QAAQJ,EAAU,IAGtBI,QAAQ,QAAS,KAAKA,QAAQ,SAAU,KAG1DwB,EAAOF,EAAQtB,QAAQ,eAAgB,MAK1CqB,EADGL,EACWtB,MAAM+B,UAAUD,EAAMR,EAAaD,GAEnCrB,MAAMgC,KAAKC,OAAOH,GAIjC,IAIoBI,EAJhBC,EAAc,IAAInC,MAAMoC,MAAM,SAAUX,EAASf,EAAIgB,MAAO,CAAC,MAAMF,KAAKd,EAAIgB,MAAM,KAClFW,EAASrC,MAAMoC,MAAME,UAAUH,EAAazB,EAAIE,UAGhD2B,EAAQ,GAEZ,IADApC,EAAUqC,UAAY,EACdN,EAAI/B,EAAUqB,KAAKG,IAC1BY,EAAME,KAAKJ,EAASH,EAAE,IAEnB,iBAAiBrB,KAAKe,IAEzBW,EAAME,KAAKJ,GAEZ3B,EAAImB,QAAUU,EAAMG,KAAK,IAErBpB,GACHZ,EAAIiC,QAAQF,KAAK,YAAcpB,EAEjC,CACD,GAnFA,CAqFA,CAzFA,E","sources":["../node_modules/prismjs/plugins/diff-highlight/prism-diff-highlight.js"],"sourcesContent":["(function () {\n\n\tif (typeof Prism === 'undefined') {\n\t\treturn;\n\t}\n\n\n\tvar LANGUAGE_REGEX = /^diff-([\\w-]+)/i;\n\tvar HTML_TAG = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/g;\n\t//this will match a line plus the line break while ignoring the line breaks HTML tags may contain.\n\tvar HTML_LINE = RegExp(/(?:__|[^\\r\\n<])*(?:\\r\\n?|\\n|(?:__|[^\\r\\n<])(?![^\\r\\n]))/.source.replace(/__/g, function () { return HTML_TAG.source; }), 'gi');\n\n\tvar warningLogged = false;\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar lang = env.language;\n\t\tif (LANGUAGE_REGEX.test(lang) && !env.grammar) {\n\t\t\tenv.grammar = Prism.languages[lang] = Prism.languages.diff;\n\t\t}\n\t});\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tif (!warningLogged && !Prism.languages.diff && !Prism.plugins.autoloader) {\n\t\t\twarningLogged = true;\n\t\t\tconsole.warn(\"Prism's Diff Highlight plugin requires the Diff language definition (prism-diff.js).\" +\n\t\t\t\t\"Make sure the language definition is loaded or use Prism's Autoloader plugin.\");\n\t\t}\n\n\t\tvar lang = env.language;\n\t\tif (LANGUAGE_REGEX.test(lang) && !Prism.languages[lang]) {\n\t\t\tPrism.languages[lang] = Prism.languages.diff;\n\t\t}\n\t});\n\n\tPrism.hooks.add('wrap', function (env) {\n\t\tvar diffLanguage; var diffGrammar;\n\n\t\tif (env.language !== 'diff') {\n\t\t\tvar langMatch = LANGUAGE_REGEX.exec(env.language);\n\t\t\tif (!langMatch) {\n\t\t\t\treturn; // not a language specific diff\n\t\t\t}\n\n\t\t\tdiffLanguage = langMatch[1];\n\t\t\tdiffGrammar = Prism.languages[diffLanguage];\n\t\t}\n\n\t\tvar PREFIXES = Prism.languages.diff && Prism.languages.diff.PREFIXES;\n\n\t\t// one of the diff tokens without any nested tokens\n\t\tif (PREFIXES && env.type in PREFIXES) {\n\t\t\t/** @type {string} */\n\t\t\tvar content = env.content.replace(HTML_TAG, ''); // remove all HTML tags\n\n\t\t\t/** @type {string} */\n\t\t\tvar decoded = content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n\n\t\t\t// remove any one-character prefix\n\t\t\tvar code = decoded.replace(/(^|[\\r\\n])./g, '$1');\n\n\t\t\t// highlight, if possible\n\t\t\tvar highlighted;\n\t\t\tif (diffGrammar) {\n\t\t\t\thighlighted = Prism.highlight(code, diffGrammar, diffLanguage);\n\t\t\t} else {\n\t\t\t\thighlighted = Prism.util.encode(code);\n\t\t\t}\n\n\t\t\t// get the HTML source of the prefix token\n\t\t\tvar prefixToken = new Prism.Token('prefix', PREFIXES[env.type], [/\\w+/.exec(env.type)[0]]);\n\t\t\tvar prefix = Prism.Token.stringify(prefixToken, env.language);\n\n\t\t\t// add prefix\n\t\t\tvar lines = []; var m;\n\t\t\tHTML_LINE.lastIndex = 0;\n\t\t\twhile ((m = HTML_LINE.exec(highlighted))) {\n\t\t\t\tlines.push(prefix + m[0]);\n\t\t\t}\n\t\t\tif (/(?:^|[\\r\\n]).$/.test(decoded)) {\n\t\t\t\t// because both \"+a\\n+\" and \"+a\\n\" will map to \"a\\n\" after the line prefixes are removed\n\t\t\t\tlines.push(prefix);\n\t\t\t}\n\t\t\tenv.content = lines.join('');\n\n\t\t\tif (diffGrammar) {\n\t\t\t\tenv.classes.push('language-' + diffLanguage);\n\t\t\t}\n\t\t}\n\t});\n\n}());\n"],"names":["Prism","LANGUAGE_REGEX","HTML_TAG","HTML_LINE","RegExp","source","replace","warningLogged","hooks","add","env","lang","language","test","grammar","languages","diff","plugins","autoloader","console","warn","diffLanguage","diffGrammar","langMatch","exec","PREFIXES","type","highlighted","decoded","content","code","highlight","util","encode","m","prefixToken","Token","prefix","stringify","lines","lastIndex","push","join","classes"],"sourceRoot":""}